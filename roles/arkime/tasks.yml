---
- name: Ensure arkime base directory exists
  file:
    path: "{{ base_directory }}/arkime"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Ensure PCAP directory exists
  file:
    path: "{{ arkime_pcap_path }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
    recurse: yes

- name: Create Arkime config directory
  file:
    path: "{{ arkime_config_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Copy CA cert for Arkime (if present)
  copy:
    src: "{{ arkime_ca_cert_src | default('') }}"
    dest: "{{ arkime_config_dir }}/ca.crt"
    mode: '0644'
  when: arkime_ca_cert_src is defined and arkime_ca_cert_src != ""

- name: Deploy docker-compose for Arkime
  template:
    src: "docker-compose.yml.j2"
    dest: "{{ base_directory }}/arkime/docker-compose.yml"
    mode: '0644'

- name: Pull Arkime Docker images (compose)
  community.docker.docker_compose_v2:
    project_src: "{{ base_directory }}/arkime"
    pull: yes

- name: Start Arkime stack (docker-compose)
  community.docker.docker_compose_v2:
    project_src: "{{ base_directory }}/arkime"
    state: present
    restarted: yes

- name: Wait for Arkime viewer to respond on port {{ arkime_port }}
  wait_for:
    host: "127.0.0.1"
    port: "{{ arkime_port }}"
    timeout: 120
    state: started

# --- Arkime initial config (run container's configure tool) ---
# The exact internal path may vary by image; the common way is to run arkime/configure or arkime/bin/Configure.
# The two tasks below try a couple of approaches; they are idempotent-ish (safe to re-run).
- name: Run Arkime configure (inside container) - attempt 1
  command: >
    docker exec arkime /arkime/bin/Configure --insecure --es-url "{{ arkime_elasticsearch_url }}" --es-user "{{ arkime_elastic_user }}" --es-pass "{{ arkime_elastic_password }}"
  register: arkime_configure
  failed_when: false
  changed_when: "'Configured' in arkime_configure.stdout or arkime_configure.rc == 0"
  no_log: false

- name: Run Arkime configure (inside container) - attempt 2 (alternate path)
  command: >
    docker exec arkime /opt/arkime/bin/configure --insecure --es "{{ arkime_elasticsearch_url }}" --user "{{ arkime_elastic_user }}" --password "{{ arkime_elastic_password }}"
  register: arkime_configure2
  failed_when: false
  changed_when: "'OK' in arkime_configure2.stdout or arkime_configure2.rc == 0"
  no_log: false

- name: Create Arkime admin user inside container (if possible)
  shell: |
    docker exec arkime /arkime/bin/arkime_add_user.sh admin "{{ arkime_password }}" || docker exec arkime /opt/arkime/bin/arkime_add_user.sh admin "{{ arkime_password }}" || true
  register: arkime_adduser
  failed_when: false
  changed_when: "'created' in arkime_adduser.stdout or arkime_adduser.rc == 0"
  no_log: true

- name: Show note if admin creation might need manual action
  debug:
    msg:
      - "If admin user was not created automatically, run inside the host:"
      - "docker exec -it arkime /arkime/bin/arkime_add_user.sh admin <password>"
      - "or consult the arkime image's bin/ directory for add_user script."
  when: arkime_adduser is defined and arkime_adduser.rc != 0

# --- optional: enable small retention helper (deploy cleanup script + cron) ---
- name: Deploy Arkime PCAP cleanup script
  copy:
    dest: /usr/local/bin/arkime_pcap_cleanup.sh
    mode: '0755'
    content: |
      #!/bin/sh
      # simple cleanup: delete pcap dirs older than retention days
      RETENTION_DAYS={{ arkime_pcap_retention_days | default(30) }}
      PCAP_DIR="{{ arkime_pcap_path }}"
      find "$PCAP_DIR" -mindepth 1 -maxdepth 1 -type d -mtime +$RETENTION_DAYS -exec rm -rf {} \;

- name: Ensure cron job for Arkime PCAP cleanup (daily)
  cron:
    name: "arkime pcap cleanup"
    job: "/usr/local/bin/arkime_pcap_cleanup.sh >/dev/null 2>&1"
    minute: '15'
    hour: '3'
